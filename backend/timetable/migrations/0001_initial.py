# Generated by Django 4.2.23 on 2025-09-11 13:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("users", "0003_alter_campus_campus_name"),
        ("units", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="MasterClassTime",
            fields=[
                (
                    "master_class_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "subject_code",
                    models.CharField(
                        help_text="Subject code (e.g., KIT101_H_SEM2_I)", max_length=50
                    ),
                ),
                (
                    "subject_description",
                    models.CharField(
                        help_text="Subject description (e.g., Programming Fundamentals)",
                        max_length=255,
                    ),
                ),
                (
                    "faculty",
                    models.CharField(
                        help_text="Faculty code (e.g., SAA-313)", max_length=50
                    ),
                ),
                (
                    "activity_group_code",
                    models.CharField(
                        help_text="Activity group code (e.g., Tut-A, Lec-A, Wks-A)",
                        max_length=50,
                    ),
                ),
                (
                    "activity_code",
                    models.CharField(
                        help_text="Specific activity code (e.g., TutA-01, LecA-01)",
                        max_length=50,
                    ),
                ),
                (
                    "activity_description",
                    models.CharField(
                        blank=True, help_text="Activity description", max_length=255
                    ),
                ),
                (
                    "campus",
                    models.CharField(
                        help_text="Campus code (SB, IR, Online)", max_length=20
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Room/location code (e.g., SB.AR15L02275)",
                        max_length=100,
                    ),
                ),
                (
                    "day_of_week",
                    models.CharField(
                        help_text="Day of the week (Mon, Tue, Wed, etc.)", max_length=20
                    ),
                ),
                ("start_time", models.TimeField(help_text="Start time of the class")),
                (
                    "weeks",
                    models.CharField(
                        help_text="Week schedule pattern (e.g., '29/7-26/8, 9/9-21/10')",
                        max_length=255,
                    ),
                ),
                (
                    "teaching_weeks",
                    models.PositiveIntegerField(help_text="Number of teaching weeks"),
                ),
                (
                    "duration",
                    models.PositiveIntegerField(help_text="Duration in minutes"),
                ),
                (
                    "staff",
                    models.CharField(
                        blank=True, help_text="Assigned staff member", max_length=255
                    ),
                ),
                (
                    "size",
                    models.PositiveIntegerField(
                        default=0, help_text="Class size/capacity"
                    ),
                ),
                ("buffer", models.IntegerField(default=0, help_text="Buffer capacity")),
                (
                    "adjusted_size",
                    models.PositiveIntegerField(
                        default=0, help_text="Adjusted class size"
                    ),
                ),
                (
                    "student_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Current student count"
                    ),
                ),
                (
                    "constraint_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of constraints"
                    ),
                ),
                (
                    "cluster",
                    models.CharField(
                        blank=True, help_text="Class cluster", max_length=50
                    ),
                ),
                (
                    "group",
                    models.CharField(
                        blank=True, help_text="Class group", max_length=50
                    ),
                ),
                (
                    "show_on_timetable",
                    models.BooleanField(
                        default=True, help_text="Whether to show on timetable (Y/N)"
                    ),
                ),
                (
                    "available_for_allocation",
                    models.BooleanField(
                        default=True,
                        help_text="Whether available for tutor allocation (Y/N)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Master Class Time",
                "verbose_name_plural": "Master Class Times",
                "db_table": "master_class_time",
                "ordering": ["subject_code", "day_of_week", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="TimetableImportLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "import_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this import",
                        unique=True,
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        help_text="Original filename of the imported CSV",
                        max_length=255,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Processing", "Processing"),
                            ("Completed", "Completed"),
                            ("Failed", "Failed"),
                        ],
                        default="Pending",
                        help_text="Status of the import process",
                        max_length=20,
                    ),
                ),
                (
                    "total_rows",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of rows in the CSV"
                    ),
                ),
                (
                    "processed_rows",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of rows successfully processed"
                    ),
                ),
                (
                    "error_rows",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of rows with errors"
                    ),
                ),
                (
                    "error_log",
                    models.TextField(
                        blank=True, help_text="Log of errors encountered during import"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the import was completed", null=True
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="User who uploaded the file",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timetable_imports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Timetable Import Log",
                "verbose_name_plural": "Timetable Import Logs",
                "db_table": "timetable_import_logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TimeTable",
            fields=[
                ("timetable_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "room",
                    models.CharField(
                        blank=True, help_text="Room/location identifier", max_length=100
                    ),
                ),
                (
                    "day_of_week",
                    models.CharField(
                        choices=[
                            ("MON", "Monday"),
                            ("TUE", "Tuesday"),
                            ("WED", "Wednesday"),
                            ("THU", "Thursday"),
                            ("FRI", "Friday"),
                            ("SAT", "Saturday"),
                            ("SUN", "Sunday"),
                        ],
                        help_text="Day of the week",
                        max_length=10,
                    ),
                ),
                ("start_time", models.TimeField(help_text="Start time of the class")),
                ("end_time", models.TimeField(help_text="End time of the class")),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="Start date of the timetable period",
                        null=True,
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="End date of the timetable period",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "campus",
                    models.ForeignKey(
                        help_text="Campus where the class is held",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timetables",
                        to="users.campus",
                    ),
                ),
                (
                    "master_class",
                    models.ForeignKey(
                        blank=True,
                        help_text="Reference to master class schedule",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="timetable_allocations",
                        to="timetable.masterclasstime",
                    ),
                ),
                (
                    "tutor_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned tutor",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tutor_timetables",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "unit_course",
                    models.ForeignKey(
                        help_text="Unit-Course combination",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timetables",
                        to="units.unitcourse",
                    ),
                ),
            ],
            options={
                "verbose_name": "Timetable",
                "verbose_name_plural": "Timetables",
                "db_table": "timetable",
                "ordering": [
                    "unit_course__unit__unit_code",
                    "day_of_week",
                    "start_time",
                ],
            },
        ),
        migrations.AddIndex(
            model_name="masterclasstime",
            index=models.Index(
                fields=["subject_code"], name="master_clas_subject_658d68_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="masterclasstime",
            index=models.Index(fields=["campus"], name="master_clas_campus_dbcd6d_idx"),
        ),
        migrations.AddIndex(
            model_name="masterclasstime",
            index=models.Index(
                fields=["day_of_week", "start_time"],
                name="master_clas_day_of__164119_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="masterclasstime",
            index=models.Index(
                fields=["available_for_allocation"],
                name="master_clas_availab_f2a12d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="masterclasstime",
            index=models.Index(
                fields=["activity_group_code"], name="master_clas_activit_8b7972_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="masterclasstime",
            constraint=models.UniqueConstraint(
                fields=("subject_code", "activity_code", "campus"),
                name="unique_subject_activity_campus",
            ),
        ),
        migrations.AddIndex(
            model_name="timetable",
            index=models.Index(
                fields=["unit_course"], name="timetable_unit_co_a5053f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="timetable",
            index=models.Index(fields=["campus"], name="timetable_campus__263ba1_idx"),
        ),
        migrations.AddIndex(
            model_name="timetable",
            index=models.Index(
                fields=["tutor_user"], name="timetable_tutor_u_b4733a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="timetable",
            index=models.Index(
                fields=["day_of_week", "start_time"],
                name="timetable_day_of__5e34ab_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="timetable",
            index=models.Index(
                fields=["start_date", "end_date"], name="timetable_start_d_343332_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="timetable",
            constraint=models.UniqueConstraint(
                fields=("unit_course", "campus", "day_of_week", "start_time"),
                name="unique_timetable_slot",
            ),
        ),
    ]
